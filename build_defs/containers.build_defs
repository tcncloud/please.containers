def container_toolchain(name:str, url:str = None, version:str = "v0.0.2", hashes:list = [], srcs:str = None, visibility:list = ['PUBLIC'], use_internal:bool=False):
    if use_internal:
        sources = '//tools:tools'
    elif srcs:
        sources = srcs
    else:
        sources = remote_file(
            name = 'name',
            _tag = 'download',
            url = f"https://github.com/tcncloud/please.containers/releases/download/{version}/tools-{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}.tar.gz" if not url else url,
            hashes = hashes,
        )
    return build_rule(
        name = name, 
        srcs = [ sources ],
        binary = True,
        cmd = '$TOOLS_JARCAT x $SRCS',
        outs = ['sha256', 'create_image_config', 'digester','extract_config','flattener','join_layers','loader','puller','pusher','update_deps','zipper'],
        tools = {'jarcat': [CONFIG.JARCAT_TOOL]},
        visibility = visibility,
        entry_points = {
            'sha256':'sha256',
            'create_image_config':'create_image_config',
            'digester':'digester',
            'extract_config':'extract_config',
            'flattener':'flattener',
            'join_layers':'join_layers',
            'loader':'loader',
            'puller':'puller',
            'pusher':'pusher',
            'update_deps':'update_deps',
            'zipper':'zipper',
        },
    )

def container_pull(name: str, image: str, tag:str='latest', registry:str='index.docker.io', toolchain:str = CONFIG.CONTAINERS.TOOLCHAIN, visibility:list=[], labels:list=[]): 
    return build_rule(
        name = name, 
        visibility = visibility,
        labels = labels,
        cmd = " && ".join([
            f"mkdir -p {name}",
            "export USER=$(whoami)",
            "export HOME=$(eval echo ~$(whoami))",
            "export DOCKER_CONFIG=$HOME/.docker",
            f"$TOOLS_PULLER -name {registry}/{image}:{tag} -directory {name} -os linux -architecture amd64",
            f"cd {name}",
            "for i in *.sha256; do mv $i ${i%.*}.tar.gz.sha256; done",
            "for i in *.tar.gz; do gzip -dk $i; echo -n $($TOOLS_SHA256 ${i%.*} | cut -f1 -d' ') > ${i%.*}.sha256; done",
        ]),
        output_dirs = [ name ],
        building_description = "Pulling image ...",
        pass_env = [
            "CLOUDSDK_CONFIG",
            "DOCKER_CONFIG",
            "CLOUDSDK_ACTIVE_CONFIG_NAME",
        ],
        tools = {
            'puller': [toolchain+"|puller"],
            'join_layers' : [toolchain + "|join_layers"],
            'sha256': [toolchain + "|sha256"]
        },
    )

def container_flattener(name:str, srcs:list, toolchain:str = CONFIG.CONTAINERS.TOOLCHAIN, visibility:list=[], labels:list=[]):
    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels,
        srcs = srcs,
        outs = [ 
            f'{name}/000.tar',
            f'{name}/000.tar.gz',
            f'{name}/000.tar.sha256',
            f'{name}/000.tar.gz.sha256',
        ],
        cmd = " && ".join([
            f"mkdir -p {name}",
            "flatten_layers=\"\"",
            "config_json=\"\"",
            "manifest_json=\"\"",
            "for t in $SRCS; do if [[ $t =~ \.tar$ ]]; then flatten_layers=\"${flatten_layers} -layer ${t}.gz,${t},${t}.gz.sha256,${t}.sha256\"; elif [[ $t =~ config.json$ ]]; then config_json=$t; elif [[ $t =~ manifest.json$ ]]; then manifest_json=$t; fi; done",
            f"$TOOLS_FLATTENER -config $config_json -manifest $manifest_json -filesystem {name}/000.tar -metadata {name}/.combined.json ${flatten_layers}",
            f"$TOOLS_ZIPPER -dst {name}/000.tar.gz -src {name}/000.tar",
            f"echo -n $($TOOLS_SHA256 {name}/000.tar | cut -f1 -d' ') > {name}/000.tar.sha256",
            f"echo -n $($TOOLS_SHA256 {name}/000.tar.gz | cut -f1 -d' ') > {name}/000.tar.gz.sha256",
            f"rm -f {name}/.combined.json",
        ]),
        tools = {
            'flattener': [toolchain+"|flattener"],
            'zipper': [toolchain+"|zipper"],
            'sha256': [toolchain+"|sha256"],
        },
    )

def container_layer(name:str, srcs:list, destination:str, toolchain:str = CONFIG.CONTAINERS.TOOLCHAIN, visibility:list=[], labels:list=[]):
    dst = destination.lstrip('/')
    datefmt = '+%Y-%m-%dT%H:%M:%S%z'
    
    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels,
        srcs = srcs,
        outs = [
            f'{name}/{name}-layer.tar',
            f'{name}/{name}-layer.tar.gz',
            f'{name}/{name}-layer.tar.sha256',
            f'{name}/{name}-layer.tar.gz.sha256',
        ],
        cmd = " && ".join([
            f'mkdir -p {name}',
            # f'layers=( $(out_locations {baseimage}) )',
            # "last_layer=$( (IFS=$'\n'; echo \"${layers[*]}\") | cut -f1 -d. | sort -n | tail -n1 )",
            # f'layer_name=$(printf "%03d" $(expr $(basename $last_layer) + 1))',
            f"layer_name={name}-layer",
            f'$TOOLS_JARCAT t -o {name}/${layer_name}.tar --flatten --prefix={dst}',
            f'$TOOLS_ZIPPER -src {name}/${layer_name}.tar -dst {name}/${layer_name}.tar.gz',
            f'$TOOLS_SHA256 {name}/${layer_name}.tar > {name}/${layer_name}.tar.sha256',
            f'$TOOLS_SHA256 {name}/${layer_name}.tar.gz > {name}/${layer_name}.tar.gz.sha256',
            f"echo {name}/${layer_name}.tar",
            f"echo {name}/${layer_name}.tar.gz",
            f"echo {name}/${layer_name}.tar.sha256",
            f"echo {name}/${layer_name}.tar.gz.sha256",

        ]),
        tools = {
            'zipper': [ toolchain+"|zipper" ],
            'sha256': [ toolchain+'|sha256'],
            'jarcat': [ CONFIG.JARCAT_TOOL ],
        },
    )

def container_config(name:str, srcs:list, timestamp:str='0', toolchain:str = CONFIG.CONTAINERS.TOOLCHAIN, description:str = '', image_labels:dict = {}, entrypoint:list = [], command:list = [], environment:dict = {}, ports:list = [], osversion:str = 'linux', architecture:str = 'amd64', visibility:list = ['PUBLIC'], labels:list=[]):
    my_labels = ''
    for l in image_labels.keys():
        v = image_labels[l]
        my_labels = f"{my_labels} -labels {l}={v}"
    
    my_environment = ''
    for e in environment.keys():
        v = environment[e]
        my_environment = f"{my_environment} -env {e}={v}"

    my_ports = ''
    if len(ports) > 0:
        for p in ports:
            my_ports = f"{my_ports} -ports {p}"
    
    my_entrypoint = ''
    if len(entrypoint) > 0:
        for e in entrypoint:
            my_entrypoint = f"{my_entrypoint} -entrypoint {e}"
    else:
        my_entrypoint = "-nullEntryPoint"
    
    my_command = ''
    if len(command) > 0:
        for c in command:
            my_command = f"{my_command} -command {c}"
    else:
        my_command = "-nullCmd"
    
    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels + [ 'container-config' ],
        srcs = srcs,
        outs = [
            f'{name}/final.config.json',
            f'{name}/final.manifest.json',
            f'{name}/final.digest',
        ],
        cmd = " && ".join([
            f'mkdir -p {name}',
            'layersCmd=""',
            'layerDigestsCmd=""',
            'for f in $SRCS; do if [[ $f =~ \.tar$ ]]; then layersCmd="$layersCmd -layer $f.gz,$f,$f.gz.sha256,$f.sha256"; layerDigestsCmd="$layerDigestsCmd -layerDigestFile @$f.sha256"; fi; done',
            f'$TOOLS_CREATE_IMAGE_CONFIG -outputConfig {name}/final.config.json -outputManifest {name}/final.manifest.json {my_labels} {my_environment} {my_ports} {my_entrypoint} {my_command} -creationTime {timestamp} -architecture {architecture} -operatingSystem {osversion} $layerDigestsCmd',
            f'$TOOLS_DIGESTER -config {name}/final.config.json $layersCmd -manifest {name}/final.manifest.json -format Docker -dst {name}/final.digest',
            # f'echo {name}/final.config.json',
            # f'echo {name}/final.manifest.json',
            # f'echo {name}/final.digest',
        ]),
        tools = {
            'create_image_config': [toolchain+"|create_image_config"],
            'digester': [toolchain+"|digester"],
        },
    )

# CAVATS:
# CLOUDSDK_CONFIG has to point to the $HOME/.config/gcloud directory, otherwise push will fail;
# DOCKER_CONFIG has to point to a $HOME/.docker with configured docker credential/helper for gcr.io cases or some other auth completed already for private repos;
# if the docker-credential-gcloud is being used, it has to be symlinked into the limited PATH used by please - either /usr/local/bin or /usr/bin
def container_push(name:str, srcs:list, repository:str = CONFIG.CONTAINERS.DEFAULT_REPO, tag:str = '', image_name:str = '', toolchain:str = CONFIG.CONTAINERS.TOOLCHAIN, visibility:list = ['PUBLIC'], labels:list=[]):
    outfile = f"{name}_run.sh"
    fqnfile = f"{name}_fqn"

    if image_name == '':
        img = name
    else:
        img = image_name

    fqn = build_rule(
        name = f'{name}_fqn',
        labels = labels + [ 'container-fqn' ],
        visibility = visibility,
        outs = [ fqnfile ],
        srcs = srcs,
        cmd = " && ".join([
            'for f in $SRCS; do if [[ $f =~ final\.digest$ ]]; then digest_file=$f; fi; done',
            f'echo {repository}/{img}:$(cat $digest_file | cut -f2 -d: | fold -w 12 | head -n1) > {fqnfile}',
        ]),
    )

    return build_rule(
        name = f'{name}_push',
        visibility = visibility,
        labels = labels + [ 'container-push' ],
        srcs = {
            'files': srcs,
            'fqn': [ fqn ],
        },
        cmd = " && ".join([
            "export USER=$(whoami)",
            "export HOME=$(eval echo ~$(whoami))",
            "export DOCKER_CONFIG=$HOME/.docker",
            f"$TOOLS_PULLER -name {registry}/{image}:{tag} -directory {name} -os linux -architecture amd64", 
            f"outfile={outfile}",
            "prefix=plz-out/gen",
            "tarfiles=\"\"",
            "for file in $SRCS_FILES; do if [[ $file =~ \.tar$ ]] ; then tarfiles=\"${tarfiles} $prefix/$file\"; elif [[ $file =~ final\.config\.json$ ]]; then config_json=$prefix/$file; elif [[ $file =~ final\.manifest\.json$ ]]; then manifest_json=$prefix/$file; fi; done",
            'tag=$(cat $SRCS_FQN)',
            "printf '#!/usr/bin/env bash\n' > $outfile",
            f"printf 'repository=\"{repository}\"\n' >> $outfile",
            f"printf 'tarfiles=\" %s \"\n' \"$( echo ${tarfiles} )\" >> $outfile",
            "printf 'layers=\"\"\n' >> $outfile",
            "printf 'for f in ${tarfiles}; do layers=\"${layers} -layer $f.gz,$f,$f.gz.sha256,$f.sha256\"; done\n' >> $outfile",
            f"printf '%s -config %s -manifest %s ${layers} -format Docker -dst %s\n' $TOOLS_PUSHER $config_json $manifest_json $tag >> $outfile",
            f"if [[ -n \"{tag}\" ]]; then printf '%s -config %s -manifest %s ${layers} -format Docker -dst %s\n' $TOOLS_PUSHER $config_json $manifest_json ${tag%%:*}:{tag} >> $outfile; fi",
            f"if [[ -n \"${CI_COMMIT_TAG:-\"\"}\" ]]; then printf '%s -config %s -manifest %s ${layers} -format Docker -dst %s\n' $TOOLS_PUSHER $config_json $manifest_json ${tag%%:*}:${CI_COMMIT_TAG} >> $outfile; fi",
        ]),
        outs = [
            outfile,
        ],
        binary = True,
        tools = {
            'pusher': [ toolchain+"|pusher" ],
        },
        deps = [
            fqn,
        ]
    )


def container_make(name:str, srcs:list, repository:str = CONFIG.CONTAINERS.DEFAULT_REPO, tag:str = '', image_name:str = '', timestamp:str='0', description:str = '', image_labels:dict = {}, entrypoint:list = [], command:list = [], environment:dict = {}, ports:list = [], osversion:str = 'linux', architecture:str = 'amd64', toolchain:str = CONFIG.CONTAINERS.TOOLCHAIN, visibility:list = ['PUBLIC'], labels:list=[]):
    
    cfg = container_config(
        name = f'{name}_config',
        srcs = srcs,
        labels = labels,
        timestamp = timestamp,
        description = description,
        image_labels = image_labels,
        entrypoint = entrypoint,
        command = command,
        environment = environment,
        ports = ports,
        osversion = osversion,
        architecture = architecture,
    )

    return container_push(
        name = name,
        srcs = srcs + [ cfg ],
        labels = labels,
        tag = tag,
        image_name = image_name,
        repository = repository,
    )