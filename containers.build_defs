def container_toolchain(name:str, url:str = None, version:str = "v0.0.1", hashes:list = [], visibility:list = ['PUBLIC'], use_internal:bool=False):
    if use_internal:
        sources = '//tools:tools'
    else:
        sources = remote_file(
            name = 'name',
            _tag = 'download',
            url = f"https://github.com/tcncloud/please.containers/releases/download/{version}/tools-{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}.tar.gz" if not url else url,
            hashes = hashes,
        )
    return build_rule(
        name = name, 
        srcs = [
            '//tools:tools',
        ],
        binary = True,
        cmd = '$TOOLS_JARCAT x $SRCS',
        outs = ['sha256', 'create_image_config', 'digester','extract_config','flattener','join_layers','loader','puller','pusher','update_deps','zipper'],
        tools = {'jarcat': [CONFIG.JARCAT_TOOL]},
        entry_points = {
            'sha256':'sha256',
            'create_image_config':'create_image_config',
            'digester':'digester',
            'extract_config':'extract_config',
            'flattener':'flattener',
            'join_layers':'join_layers',
            'loader':'loader',
            'puller':'puller',
            'pusher':'pusher',
            'update_deps':'update_deps',
            'zipper':'zipper',
        },
    )

def container_pull(name: str, image: str, tag:str='latest', registry:str='index.docker.io', toolchain:str = CONFIG.PLEASE_CONTAINERS_TOOLCHAIN, visibility:list=[], labels:list=[]): 
    return build_rule(
        name = name, 
        visibility = visibility,
        labels = labels,
        cmd = " && ".join([
            f"if [[ {registry} =~ gcr\.io && ! -e /usr/local/bin/docker-credential-gcloud ]]; then echo This target requires /usr/local/bin/docker-credential-gcloud; exit 1; fi",
            f"if [[ {registry} =~ gcr\.io && -z $CLOUDSDK_CONFIG ]]; then echo This target requires CLOUDSDK_CONFIG to point to where gcloud keeps its configuration; exit 1; fi",
            f"if [[ {registry} =~ gcr\.io && -z $DOCKER_CONFIG ]]; then echo This target requires DOCKER_CONFIG to point to where docker keeps its configuration; exit 1; fi",
            f"mkdir -p {name}",
            f"$TOOLS_PULLER -name {registry}/{image}:{tag} -directory {name} -os linux -architecture amd64",
            f"cd {name}",
            "for i in *.sha256; do mv $i ${i%.*}.tar.gz.sha256; done",
            "for i in *.tar.gz; do gzip -dk $i; echo -n $($TOOLS_SHA256 ${i%.*} | cut -f1 -d' ') > ${i%.*}.sha256; done",
        ]),
        outs = [ name ],
        building_description = "Pulling image ...",
        pass_env = [
            "CLOUDSDK_CONFIG",
            "DOCKER_CONFIG",
            "CLOUDSDK_ACTIVE_CONFIG_NAME",
        ],
        tools = {
            'puller': [toolchain+"|puller"],
            'join_layers' : [toolchain + "|join_layers"],
            'sha256': [toolchain + "|sha256"]
        },
    )

def container_flattener(name:str, baseimage:str, toolchain:str = CONFIG.PLEASE_CONTAINERS_TOOLCHAIN, visibility:list=[], labels:list=[]):
    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels,
        outs = [ name ],
        cmd = " && ".join([
            f"mkdir -p {name}",
            "flatten_layers=\"\"",
            f"workdir=$(location {baseimage})",
            "for t in $(ls -1 $workdir/*.tar); do flatten_layers=\"${flatten_layers} -layer ${t}.gz,${t},${t}.gz.sha256,${t}.sha256\"; done",
            f"$TOOLS_FLATTENER -config $workdir/config.json -manifest $workdir/manifest.json -filesystem {name}/000.tar -metadata {name}/.combined.json ${flatten_layers}",
            f"$TOOLS_ZIPPER -dst {name}/000.tar.gz -src {name}/000.tar",
            f"echo -n $($TOOLS_SHA256 {name}/000.tar | cut -f1 -d' ') > {name}/000.tar.sha256",
            f"echo -n $($TOOLS_SHA256 {name}/000.tar.gz | cut -f1 -d' ') > {name}/000.tar.gz.sha256",
            f"rm -f {name}/.combined.json",
        ]),
        tools = {
            'flattener': [toolchain+"|flattener"],
            'zipper': [toolchain+"|zipper"],
            'sha256': [toolchain+"|sha256"],
        },
        deps = [
            baseimage,
        ],
    )

def container_inject(name:str, baseimage:str, srcs:list, destination:str, toolchain:str = CONFIG.PLEASE_CONTAINERS_TOOLCHAIN, visibility:list=[], labels:list=[]):
    dst = destination.lstrip('/')
    datefmt = '+%Y-%m-%dT%H:%M:%S%z'
    
    if CONFIG.HOSTOS == 'darwin':
        datecmd = 'date -j -f "%s" '
    else:
        datecmd = 'date -d @'

    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels,
        outs = [ name ],
        srcs = srcs,
        cmd = " && ".join([
            f'mkdir -p {name}',
            f'last_layer=$(ls $(location {baseimage}) | cut -f1 -d"."| sort -u -r | head -1)',
            f'cp $(location {baseimage})/* {name}/',
            f'layer_name=$(printf "%03d" $(expr $last_layer + 1))',
            f'$TOOLS_JARCAT t -o {name}/${layer_name}.tar --prefix={dst}',
            f'$TOOLS_ZIPPER -src {name}/${layer_name}.tar -dst {name}/${layer_name}.tar.gz',
            f'$TOOLS_SHA256 {name}/${layer_name}.tar > {name}/${layer_name}.tar.sha256',
            f'$TOOLS_SHA256 {name}/${layer_name}.tar.gz > {name}/${layer_name}.tar.gz.sha256',
        ]),
        tools = {
            'zipper': [ toolchain+"|zipper" ],
            'sha256': [ toolchain+'|sha256'],
            'jarcat': [ CONFIG.JARCAT_TOOL ],
        },
        deps = [
            baseimage,
        ]
    )

def container_config(name:str, baseimage:str, timestamp:str='0', toolchain:str = CONFIG.PLEASE_CONTAINERS_TOOLCHAIN, description:str = '', image_labels:dict = {}, entrypoint:list = [], command:list = [], environment:dict = {}, ports:list = [], osversion:str = 'linux', architecture:str = 'amd64', visibility:list = ['PUBLIC'], labels:list=[]):
    my_labels = ''
    for l in image_labels.keys():
        v = image_labels[l]
        my_labels = f"{my_labels} -labels {l}={v}"
    
    my_environment = ''
    for e in environment.keys():
        v = environment[e]
        my_environment = f"{my_environment} -env {e}={v}"

    my_ports = ''
    if len(ports) > 0:
        for p in ports:
            my_ports = f"{my_ports} -ports {p}"
    
    my_entrypoint = ''
    if len(entrypoint) > 0:
        for e in entrypoint:
            my_entrypoint = f"{my_entrypoint} -entrypoint {e}"
    else:
        my_entrypoint = "-nullEntryPoint"
    
    my_command = ''
    if len(command) > 0:
        for c in command:
            my_command = f"{my_command} -command {c}"
    else:
        my_command = "-nullCmd"
    
    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels,
        output_dirs = [
            name
        ],
        cmd = " && ".join([
            f'mkdir -p {name}',
            f'cp $(location {baseimage})/* {name}/',
            f'$TOOLS_CREATE_IMAGE_CONFIG -outputConfig {name}/flat.config.json -outputManifest {name}/flat.manifest.json {my_labels} {my_environment} {my_ports} {my_entrypoint} {my_command} -creationTime {timestamp} $(for i in $(ls {name}/[0-9]*.tar | cut -f1 -d"."| sort -u); do echo "-layerDigestFile @$i.tar.sha256"; done)',
            f'$TOOLS_DIGESTER -config {name}/flat.config.json $(for i in $(ls {name}/[0-9]*.tar|cut -f1 -d"."|sort -u); do echo "-layer $i.tar.gz,$i.tar,$i.tar.gz.sha256,$i.tar.sha256" ;done) -manifest {name}/flat.manifest.json -format Docker -dst {name}/flat.digest'
        ]),
        tools = {
            'create_image_config': [toolchain+"|create_image_config"],
            'digester': [toolchain+"|digester"],
        },
        deps = [
            baseimage,
        ]
    )

# CAVATS:
# CLOUDSDK_CONFIG has to point to the $HOME/.config/gcloud directory, otherwise push will fail;
# DOCKER_CONFIG has to point to a $HOME/.docker with configured docker credential/helper for gcr.io cases or some other auth completed already for private repos;
# if the docker-credential-gcloud is being used, it has to be symlinked into the limited PATH used by please - either /usr/local/bin or /usr/bin
# TODO: find a way to remote the unnecessary output
def container_push(name:str, baseimage:str, repository:str, tag:str = '', image_name:str = '', toolchain:str = CONFIG.PLEASE_CONTAINERS_TOOLCHAIN, visibility:list = ['PUBLIC'], labels:list=[]):
    outfile = f"{name}_run.sh"
    return build_rule(
        name = name,
        visibility = visibility,
        labels = labels,
        cmd = " && ".join([
            f"S=\"$(out_locations {baseimage})\"",
            f"outfile={outfile}",
            "tarfiles=\"\"",
            "for file in ${S}; do if [[ $file =~ \.tar$ ]] ; then tarfiles=\"${tarfiles} $file\"; elif [[ $file =~ flat\.config\.json$ ]]; then config_json=$file; elif [[ $file =~ flat\.manifest\.json ]]; then manifest_json=$file; elif [[ $file =~ flat\.digest$ ]]; then digest_file=$file; fi; done",
            f"if [[ -z \"{image_name}\" ]]; then image_name={name}; else image_name={image_name}; fi",            
            "printf '#!/usr/bin/env bash\n' > $outfile",
            "printf 'repository=\"$@\"\n' >> $outfile",
            f"printf '[[ -z \"$repository\" ]] && repository=\"{repository}\"\n' >> $outfile",
            f"printf 'if [[ -z \"$repository\" ]]; then echo Repository is required; exit 1; fi\n' >> $outfile",
            f"printf 'tarfiles=\" %s \"\n' \"$( echo ${tarfiles} )\" >> $outfile",
            "printf 'layers=\"\"\n' >> $outfile",
            f"printf 'if [[ -z \"{tag}\" ]]; then tag=$(cat %s | cut -f2 -d: | fold -w 12 | head -n1); else tag=\"{tag}\"; fi\n' $digest_file >> $outfile",
            "printf 'for f in ${tarfiles}; do layers=\"${layers} -layer $f.gz,$f,$f.gz.sha256,$f.sha256\"; done\n' >> $outfile",
            f"printf '%s -config %s -manifest %s ${layers} -format Docker -dst $repository/%s:$tag\n' $TOOLS_PUSHER $config_json $manifest_json $image_name >> $outfile",
            f"printf 'if [[ -n \"$CI_COMMIT_TAG\" ]]; then %s -config %s -manifest %s ${layers} -format Docker -dst $repository/%s:$CI_COMMIT_TAG; fi\n' $TOOLS_PUSHER $config_json $manifest_json $image_name >> $outfile",
        ]),
        outs = [
            outfile,
        ],
        binary = True,
        tools = {
            'pusher': [ toolchain+"|pusher" ],
        },
        deps = [
            baseimage,
        ]
    )