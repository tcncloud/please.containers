


def container_toolchain(name:str, url:str = None, version:str = "v0.0.1", hashes:list = [], visibility:list = ['PUBLIC']):
    return build_rule(
        name = name, 
        srcs = [
            remote_file(
                name = name, 
                _tag = "download",
                url = f"https://github.com/tcncloud/please.containers/releases/download/{version}/rules_docker_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}.tar.gz" if not url else url,
                hashes = hashes,
            )
        ],
        visibility = visibility,
        cmd = ' && '.join([
            f'mkdir {name}',
            f'tar xf $SRCS -C {name}',
        ]),
        outs = [name],
        entry_points = {
            'create_image_config': f"{name}/create_image_config/create_image_config_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}",
            'digester': f'{name}/digester/digester_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'extract_config': f'{name}/extract_config/extract_config_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'flattener': f'{name}/flattener/flattener_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'join_layers': f'{name}/join_layers/join_layers_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'loader': f'{name}/loader/loader_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'puller': f'{name}/puller/puller_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'pusher': f'{name}/pusher/pusher_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'update_deps': f'{name}/update_deps/update_deps_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
            'zipper': f'{name}/zipper/zipper_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}',
        },
        binary = True,
    )

def container_pull(name: str, image: str, tag:str='latest', registry:str='index.docker.io', toolchain:str = "//examples:toolchain", visibility:list=[]): 
    return build_rule(
        name = name, 
        visibility = visibility,
        cmd = " && ".join([
            f"mkdir -p {name}",
            f"$TOOLS_PULLER -name {registry}/{image}:{tag} -directory {name} -os linux -architecture amd64",
            f"cd {name}",
            "for i in *.sha256; do mv $i ${i%.*}.tar.gz.sha256; done",
            "for i in *.tar.gz; do gzip -dk $i; echo -n $(sha256sum ${i%.*} | cut -f1 -d' ') > ${i%.*}.sha256; done",
        ]),
        outs = [ name ],
        building_description = "Pulling image ...",
        tools = {
            'puller': [toolchain+"|puller"],
            'join_layers' : [toolchain + "|join_layers"],
        }
    )

def container_flattener(name:str, baseimage:str, toolchain:str = '//examples:toolchain', description:str = '', labels:dict = {}, entrypoint:list = [], command:list = [], environment:dict = {}, ports:list = [], osversion:str = 'linux', architecture:str = 'amd64'):
    my_labels = ''
    for l in labels.keys():
        v = labels[l]
        my_labels = f"{my_labels} -labels {l}={v}"
    
    my_environment = ''
    for e in environment.keys():
        v = environment[e]
        my_environment = f"{my_environment} -env {e}={v}"

    my_ports = ''
    if len(ports) > 0:
        my_ports = " -ports ".join(ports)
    
    my_entrypoint = ''
    if len(entrypoint) > 0:
        for e in entrypoint:
            my_entrypoint = f"{my_entrypoint} -entrypoint {e}"
    else:
        my_entrypoint = "-nullEntryPoint"
    
    my_command = ''
    if len(command) > 0:
        for c in command:
            my_command = f"{my_command} -command {c}"
    else:
        my_command = "-nullCmd"
    
    return build_rule(
        name = name,
        visibility = ['PUBLIC'],
        outs = {
            tar: name + "/flat.tar",
            targz: name + "/flat.tar.gz",
            sha: name + "/flat.tar.sha256",
            shagz: name + "/flat.tar.gz.sha256",
            manifest: name + "/flat.manifest.json",
        },
        cmd = " && ".join([
            f"mkdir -p {name}",
            "flatten_layers=\"\"",
            f"workdir=$(location {baseimage})",
            "for t in $(ls -1 $workdir/*.tar); do flatten_layers=\"${flatten_layers} -layer ${t}.gz,${t},${t}.gz.sha256,${t}.sha256\"; done",
            f"$TOOLS_FLATTENER -config $workdir/config.json -manifest $workdir/manifest.json -filesystem {name}/flat.tar -metadata {name}/.combined.json ${flatten_layers}",
            f"$TOOLS_ZIPPER -dst {name}/flat.tar.gz -src {name}/flat.tar",
            f"echo -n $(sha256sum {name}/flat.tar | cut -f1 -d' ') > {name}/flat.tar.sha256",
            f"echo -n $(sha256sum {name}/flat.tar.gz | cut -f1 -d' ') > {name}/flat.tar.gz.sha256",
            f"$TOOLS_CREATE_IMAGE_CONFIG -outputConfig {name}/flat.config.json -outputManifest {name}/flat.manifest.json {my_labels} {my_environment} {my_ports} {my_entrypoint} {my_command} -creationTime $(date +%s) -layerDigestFile @{name}/flat.tar.sha256",
            f"$TOOLS_DIGESTER -config {name}/flat.config.json -layer {name}/flat.tar.gz,{name}/flat.tar,{name}/flat.tar.gz.sha256,{name}/flat.tar.sha256 -manifest {name}/flat.manifest.json -format Docker -dst {name}/flat.digest",
        ]),
        tools = {
            'flattener': [toolchain+"|flattener"],
            'zipper': [toolchain+"|zipper"],
            'create_image_config': [toolchain+"|create_image_config"],
            'digester': [toolchain+"|digester"],
        },
        deps = [
            baseimage,
        ]
    )

    